<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swiftgen on</title><link>https://puasonych.github.io/tags/swiftgen/</link><description>Recent content in swiftgen on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©2021 Erik Basargin.</copyright><lastBuildDate>Fri, 20 Nov 2020 11:41:00 +0300</lastBuildDate><atom:link href="https://puasonych.github.io/tags/swiftgen/index.xml" rel="self" type="application/rss+xml"/><item><title>SPM: modularization of the project to increase the building speed</title><link>https://puasonych.github.io/posts/spm-modularization-of-the-project/</link><pubDate>Fri, 20 Nov 2020 11:41:00 +0300</pubDate><guid>https://puasonych.github.io/posts/spm-modularization-of-the-project/</guid><description/></item><item><title>Confusing extensions in Swift</title><link>https://puasonych.github.io/posts/confusing-extensions-in-swift/</link><pubDate>Mon, 30 Mar 2020 16:37:21 +0500</pubDate><guid>https://puasonych.github.io/posts/confusing-extensions-in-swift/</guid><description>&lt;p>This post is a little bit the information aggregator. ðŸ™ƒ If you find a mistake, you could write to me about it I really appreciate that. Have a nice read.&lt;/p>
&lt;h1 id="example-with-jsondecoder">Example with JSONDecoder&lt;/h1>
&lt;p>What would happen if we run the following piece of code?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;:&lt;/span> &lt;span class="n">Codable&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">enum&lt;/span> &lt;span class="nc">CodingKeys&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CodingKey&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">info&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Decoder&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">container&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keyedBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CodingKeys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">forKey&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">info&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Default init(from decoder:)&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Decoder&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">container&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keyedBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CodingKeys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">forKey&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">info&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Custom init(from decoder:)&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">data&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="s">&amp;#34;{&amp;#34;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="s">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="n">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="s">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="p">#.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">using&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">object&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">JSONDecoder&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">debugDescription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Try thinking for 5 seconds about the result. ðŸ¤”&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="nb">Optional&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">info&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Default init(from decoder:)&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="why-did-it-happen">Why did it happen?&lt;/h1>
&lt;p>The &lt;code>JSONDecoder:decode&lt;/code> definition looks like&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">decode&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Decodable&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We see the &lt;code>generic function&lt;/code> and also the metatype &lt;code>T.Type&lt;/code>. Iâ€™m not focusing your attention on those two definitions by accident. We should understand these structures of language.&lt;/p>
&lt;p>You could read more about metatypes:&lt;/p>
&lt;ul>
&lt;li>Swift documentation&lt;/li>
&lt;li>Whatâ€™s .self, .Type and .Protocol?&lt;/li>
&lt;/ul>
&lt;p>Consider the example with metatype.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">TestProtocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">info&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span>&lt;span class="p">&amp;gt;:&lt;/span> &lt;span class="n">TestProtocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">info&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">!&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">info&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Default init(value:)&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">!&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">info&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Custom init(value:)&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="kc">self&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Weâ€™ll get the &lt;code>&amp;quot;Default init(value:)&amp;quot;&lt;/code>. The reason is the second &lt;code>init(from value: Codable)&lt;/code> not requirements of such protocol because for the swift compiler itâ€™s just another method. However, itâ€™s overloading of the method for us.&lt;/p>
&lt;p>These methods calls &lt;code>static&lt;/code> (it isnâ€™t about &lt;code>static func&lt;/code>). Generally, the &lt;code>Static dispatch&lt;/code> works here - the swift compiler discribes how a programm will select which implementation of a method on the compile time.&lt;/p>
&lt;p>You will see that if you build a &lt;a href="https://github.com/apple/swift/blob/master/docs/SIL.rst#sil-in-the-swift-compiler"target="_blank" rel="noopener noreferrer">Swift Intermediate Language (SIL)&lt;/a>
file by the example.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">swiftc&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">emit&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sil&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">swift&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">swift&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>No polymorphism for static methods.&lt;/p>
&lt;/blockquote>
&lt;p>Where a same problem could be in &lt;code>JSONDecoder:decode&lt;/code>? If we see how it works, we will find the reason. The next code from the official repository:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">open&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">decode&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Decodable&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">topLevel&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Any&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">topLevel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">JSONSerialization&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">with&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">DecodingError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dataCorrupted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DecodingError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">codingPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span> &lt;span class="n">debugDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;The given data was not valid JSON.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">underlyingError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">decoder&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">__JSONDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">referencing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">topLevel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unbox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">topLevel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">DecodingError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">valueNotFound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DecodingError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">codingPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span> &lt;span class="n">debugDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;The given data did not contain a top-level value.&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// &lt;/span>&lt;span class="cs">MARK:&lt;/span>&lt;span class="c1"> - Concrete Value Representations&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">extension&lt;/span> &lt;span class="nc">__JSONDecoder&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">unbox&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Decodable&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">unbox_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">unbox_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Decodable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Any&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You would think a problem will be when the &lt;code>unbox_&lt;/code> called, but the situation a little bit complicated.
Consider another example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Codable&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">type&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">generate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Weâ€™ll get the &lt;code>&amp;quot;Default init(value:)&amp;quot;&lt;/code> again. What will we see in the SIL code for the &lt;code>generate&lt;/code> function?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// generate&amp;lt;A, B&amp;gt;(value:as:)&lt;/span>
&lt;span class="n">sil&lt;/span> &lt;span class="n">hidden&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">s5test28generate5value2asxq__xmtAA12TestProtocolRzSeR_SER_r0_lF&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="n">convention&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Decodable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Encodable&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">(@&lt;/span>&lt;span class="n">in_guaranteed&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">thick&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// %0 // user: %9&lt;/span>
&lt;span class="c1">// %1 // users: %7, %3&lt;/span>
&lt;span class="c1">// %2 // users: %9, %4&lt;/span>
&lt;span class="n">bb0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="n">thick&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">debug_value_addr&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">let&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argno&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c1">// id: %3&lt;/span>
&lt;span class="n">debug_value&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="n">thick&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">let&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="s">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argno&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">// id: %4&lt;/span>
&lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">alloc_stack&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span> &lt;span class="c1">// users: %10, %9, %6&lt;/span>
&lt;span class="o">%&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">init_existential_addr&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="c1">// user: %7&lt;/span>
&lt;span class="n">copy_addr&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">initialization&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="c1">// id: %7&lt;/span>
&lt;span class="o">%&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">witness_method&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kc">Self&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="kc">Self&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">Self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="kc">Self&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="n">convention&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">witness_method&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">(@&lt;/span>&lt;span class="k">in&lt;/span> &lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">thick&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span> &lt;span class="c1">// user: %9&lt;/span>
&lt;span class="o">%&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">apply&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="n">convention&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">witness_method&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TestProtocol&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">(@&lt;/span>&lt;span class="k">in&lt;/span> &lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">thick&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="err">Ï„&lt;/span>&lt;span class="n">_0_0&lt;/span>
&lt;span class="n">dealloc_stack&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Decodable&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Encodable&lt;/span> &lt;span class="c1">// id: %10&lt;/span>
&lt;span class="o">%&lt;/span>&lt;span class="mi">11&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">tuple&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="c1">// user: %12&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="mi">11&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// id: %12&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// end sil function &amp;#39;$s5test28generate5value2asxq__xmtAA12TestProtocolRzSeR_SER_r0_lF&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we see the &lt;code>generate&lt;/code> function works with &lt;code>TestProtocol.init&lt;/code>. Why? You could read the small article about the &lt;a href="https://github.com/apple/swift/blob/master/docs/SIL.rst#abstraction-difference"target="_blank" rel="noopener noreferrer">Abstract Difference of SIL Types&lt;/a>
. I just show you three base things about genericsâ€™ working as Iâ€™ve understood this:&lt;/p>
&lt;ul>
&lt;li>Donâ€™t generate a different copy of generic function for every unconstrained type.&lt;/li>
&lt;li>Donâ€™t give every type in the language a common representation.&lt;/li>
&lt;li>Donâ€™t dynamically construct a call to generator depending on an unconstrained type.&lt;/li>
&lt;/ul>
&lt;p>I hope this information will help you. ðŸ˜ƒ&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://swiftrocks.com/whats-type-and-self-swift-metatypes.html"target="_blank" rel="noopener noreferrer">Whatâ€™s .self, .Type and .Protocol?&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/videos/play/wwdc2015/408/"target="_blank" rel="noopener noreferrer">WWDC 2015: Protocol-Oriented Programming in Swift&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/videos/play/wwdc2016/416/"target="_blank" rel="noopener noreferrer">WWDC 2016: Understanding Swift Performance&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://medium.com/@leandromperez/protocol-extensions-gotcha-9ef1a42c83b6#2347"target="_blank" rel="noopener noreferrer">Swift Protocol Extensions Method Dispatch&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://medium.com/flawless-app-stories/static-vs-dynamic-dispatch-in-swift-a-decisive-choice-cece1e872d"target="_blank" rel="noopener noreferrer">Static vs Dynamic Dispatch in Swift: A decisive choice&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://github.com/apple/swift/blob/master/docs/SIL.rst"target="_blank" rel="noopener noreferrer">Swift Intermediate Language (SIL)&lt;/a>
&lt;/li>
&lt;/ul></description></item></channel></rss>